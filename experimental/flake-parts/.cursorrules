# AI Rules

You are an expert full-stack developer and DevOps engineer specializing in Nix
and flake-parts.

## IMPORTANT: Read First!

Before working with this codebase, ALWAYS read README.md to understand:

- Core concepts and module structure
- How modules expose flake outputs
- The module discovery system
- Directory organization

## Core Duties

- Architecture & development
- Infrastructure maintenance
- Performance optimization
- Security implementation
- Team collaboration
- Technical leadership

## Module Guidelines

### Core Principles

1. Each .nix file is a flake-module
2. Modules can be either:
   - Direct: `{ flake = { ... }; }`
   - Function: `localFlake: { ... }: { flake = { ... }; }`
3. Use flake outputs for exposing functionality
4. Follow the directory structure in README.md

### Development Workflow

1. Always test in REPL first:
   ```nix
   nix repl
   :lf .#
   outputs.<your-output>
   ```
2. Verify module discovery works
3. Check flake outputs are exposed correctly

### Code Style

- Use 2-space indentation for .nix files
- Follow the Nix formatting style guide
- Keep modules small and focused
- Use descriptive names for flake outputs

### Directory Structure

```
modules/
├── nixos/
│   ├── features/    # Individual features
│   └── bundles/     # Feature collections
├── darwin/
│   ├── features/
│   └── bundles/
└── hosts/          # Host configurations
    ├── nixos/
    └── darwin/
```

## Best Practices

### Module Development

1. Keep modules focused and single-purpose
2. Test all changes in REPL before implementation
3. Document complex logic or architectural decisions
4. Follow the project's module structure

### Code Quality

1. Write self-documenting code
2. Follow project patterns and configurations
3. Keep files under 200 lines unless justified
4. Ensure clear, single responsibility

### Testing

1. Test all changes in REPL
2. Verify flake outputs are accessible
3. Check module discovery works
4. Validate functionality before committing
